Networking Working Group                          
Request for Comments: 4242                        
Category: Standards Track                        															                                                                                                November 29/11/2018


               RType Communication Protocol using UDP

Status of This Memo

     This document specifies an Internet protocol for the Rtype project
          at EPITECH. Distribution of this memo is unlimited.

Copyright Notice

     Copyright (c) 2018 the persons identified as
          document authors. All rights reserved.


                             Standard Tracks                    [Page 2]
RFC 4242              RType Communication Protocol   November 29/11/2018


Table of Contents

     1. Introduction ..................................................2
          1.1. Conventions Used in This Document ......................2
     2. Session Management ............................................2
     3. Message Exchange ..............................................3
     4. Data Unit Format ..............................................4
     5. Binary Structur Format ........................................5
     6. List of UDP commands ..........................................6
          6.1 Authentification ........................................7
          6.2 Game Loop ...............................................7
          6.3 End of Game .............................................7
          6.4 Disconnection ...........................................7
	  6.5 Examples      ...........................................7

1.      Introduction

  This document describes how the RType Communication Protocol (UDP) is
  mapped onto a multiple Client‐Server UDP connection.  UDP is described
  in [RFCxxxx].

1.1.    Conventions Used in This Document

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [RFC2119].

2.      Session Management

  Mapping the RCP onto the UDP service is straightforward.  First it
  requires the creation of a UDP connection between two peers, both
  peers can then communicate.  Since no handshake is required and
  following the RType project requirements, one peer is identified as
  the server, the other as the client.

  A server MUST listen for UDP requests on a unused UDP port.  A client
  MUST connect to a server by specifing the listening port of the
  server. Once established, the server MUST send a RCP <Login> command
  to the client to confirm the connection.

  The communication is normally ended by a client issuing an RCP
  <Logout> command.  A server receiving an RCP <Logout> command MUST end
  the connection and close the UDP connection.

  A server MAY limit the lifespan of a client.  A client inactive for
  more than a server‐defined period MAY be closed by the server.

                             Standard Tracks                    [Page 3]
RFC 4242              RType Communication Protocol Novembre 2019/11/2018


3.      Message Exchange

  RCP messages are initiated by the server, in the form of RCP commands.
  A RCP client MUST NOT respond to RCP commands.  A RCP client MUST only
  send <Input> commands, thus sending the keyboard input to the server.

  RCP server MUST limit the number of UDP connections to four, RCP
  messages will be broadcast to all RCP clients currently connected to
  the RCP server.  Each RCP messages MUST be binary data, send with the
  RCP Header containing the RCP command id, the size of the data
  followed by the data itself.  Commands MUST be handled independently
  and in the same order as sent from the server.

  A server SHOULD impose a limit on the amount of time the RCP client as
  to issue a well‐formed RCP command.  A server SHOULD end the UDP
  session and close the connection if a well‐formed RCP command is not
  received within the time limit.

                      Client                  Server
		        |        Connect        |
		        |>>‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐>>|
                        |                       |
	                |        Logged         |
		        |<<‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐<<|
			|                       |
	                | Players ready to play |
		        |>>‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐>>|
			|                       |
		        |       Start Game      |
		        |<<‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐<<|
			|                       |
			|         Input         |
			|>>‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐>>|
		        |                       |
			|         Answer        |
			|<<‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐<<|
			|                       |
			|      Game Ended       |
			|<<‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐<<|
			|                       |
			|        Logout         |
			|>>‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐>>|

              Figure 1: RCP Client‐Server Exchange over UDP

                             Standard Tracks                    [Page 4]
RFC 4242              RType Communication Protocol   November 29/11/2018


4.      Data Unit Format

     The RCP data unit format contains two fields: a 4‐bit header that
     describes the total length of the data unit, followed by an
     operation code corresponding to the operation to execute.  the RCP
     client MUST successfully read that many bytes to ensure the message
     has being fully received, before processing the RCP command.

                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
		      +.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+
		      + OP/LENGTH |      RCP DATA     +
		      +.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+

     Figure 2: Exemple of Formatted RCP command sent over UDP (One tick
               mark represents a bit)

     RCP Header (4 bit): Contains the Operation code as an short
     integer, and the total length of the RCP data unit in network (big
     endian) byte order.  The octets contained in this field MUST NOT be
     included in the total length.

     RCP Data (variable size): The RCP command carried by the data unit.

                             Standard Tracks                    [Page 5]
RFC 4242              RType Communication Protocol   November 29/11/2018

5.      Binary Structur Format

     template <typename T>
     struct          infos {
           int size;
	   std::array<T, 350> _arr;
		      	   };

     Figure 3: List of the struct for the binary protocol between
               Server and Client

                             Standard Tracks                    [Page 6]
RFC 4242              RType Communication Protocol   November 29/11/2018

6.      Listing of RCP commands

                      _________________________________
		      |                               |
		      |       Commands sending        |
		      |_______________________________|
		      |                               |
		      |       Server | Client         |
		      |             ‐‐>               |
		      |             <‐‐               |
		      |_______________________________|
		      |                               |
		      |     Operation Code listing    |
		      |_______________________________|
		      |                               |
		      |   001‐049 | Server to Client  |
		      |   010‐049 | Client to Server  |
		      |_______________________________|
		      
                             Standard Tracks                    [Page 7]
RFC 4242              RType Communication Protocol   November 29/11/2018

6.1     Authentification

       [00]  <‐‐ | Login

       [id * 10]  ‐‐> | Player LoggedIn (Broadcast) PlayerID

       [84]  ‐‐> | Cannot join

       [nb - 1]  <‐‐ | Player is ready to play

       [01]  ‐‐> | Game started (Broadcast) all Player's ID

6.2     Game Loop

       [nb - [2 - 9]]  <‐‐> | Input / (Answer Broadcast info struct)
       
       	   	    [nb - 2]  ‐‐> | deconection

	      	    [nb - 3]  ‐‐> | Player shoot

	      	    [nb - 4]  ‐‐> | Player goes UP

	      	    [nb - 5]  ‐‐> | Player goes DOWN

	      	    [nb - 6]  ‐‐> | Player goes LEFT

	      	    [nb - 7]  ‐‐> | Player goes RIGHT

       [1 - 8]  ‐‐> | Game details : (Broadcast) info struct

       	      	    [02]  ‐‐> | Type | Num | Pos(x, y) | Rot(angle)

		    [nb - 2]  ‐‐> | Death

		    [000]  ‐‐> |

		    [000]  ‐‐> |

6.3     End of Game

       [09]  ‐‐> | GameEnded

6.4     Disconnection

       [nb - 2]  <‐‐ | Disconnect

       [09]  ‐‐> | (Broadcast) Server is closed

6.5    Examples

       Client send [11] | Client nb[1] is ready

       Client send [36] | Client nb[3] want's to go LEFT

       Server send [22] | Client nb[2] is dead
